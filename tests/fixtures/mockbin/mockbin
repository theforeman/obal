#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import argparse
import json
try:
    from shlex import quote
except ImportError:
    from pipes import quote


_FAKE_TASKINFO = """Task: 1234
Type: build
Request Parameters:
  Source: hello-2.10-1.el7.src.rpm
  Build Target: obaltest-nightly-rhel7
Owner: nobody
State: closed
Created: Tue Nov 13 08:50:17 2018
Started: Tue Nov 13 08:50:26 2018
Finished: Tue Nov 13 08:51:20 2018
Host: buildhost
Build: hello-2.10-1.el7 (12345)"""

_FAKE_SRPMS = {
    'hello': 'hello-2.10-1.src.rpm',
    'foo': 'foo-1.0-1.src.rpm'
}

prog = os.path.basename(sys.argv[0])
sys.argv[0] = prog

mockbin_log = os.environ.get('MOCKBIN_LOG', None)
mockbin_log_contents = []

if mockbin_log:
    with open(mockbin_log, 'a') as logfile:
        logline = ' '.join([quote(entry) for entry in sys.argv])
        logfile.write("%s\n" % (logline))
    with open(mockbin_log, 'r') as logfile:
        mockbin_log_contents = [line.strip() for line in logfile.readlines()]

if prog == 'tito':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # tito release arguments and options
    parser_release = subparsers.add_parser('release')
    parser_release.add_argument('dest')
    parser_release.add_argument('--scratch', action='store_true')
    parser_release.add_argument('--test', action='store_true')
    parser_release.add_argument('-y', '--yes', dest='yes', action='store_true', default=False)
    parser_release.add_argument('--arg')

    # tito build arguments and options
    parser_build = subparsers.add_parser('build')
    parser_build.add_argument('--srpm', action='store_true', default=False)
    parser_build.add_argument('--output', default=None)
    parser_build.add_argument('--scl')
    parser_build.add_argument('--offline', action='store_true')

    args = parser.parse_args()

    pkg = os.path.basename(os.getcwd())

    if 'yes' in args and args.yes:
        print('Created task: 1234')
    if 'output' in args and args.output:
        if not os.path.exists(args.output):
            os.makedirs(args.output)
        srpm_path = os.path.join(args.output, _FAKE_SRPMS[pkg])
        open(srpm_path, 'w').close()
    else:
        srpm_path = _FAKE_SRPMS[pkg]
    if 'srpm'in args and args.srpm:
        print("Wrote: {}".format(srpm_path))

elif prog in ['koji', 'brew']:
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand')

    parser_listpkgs = subparsers.add_parser('list-pkgs')
    parser_listpkgs.add_argument('--tag')
    parser_listpkgs.add_argument('--package')
    parser_listpkgs.add_argument('--quiet', action='store_true')

    parser_listtagged = subparsers.add_parser('list-tagged')
    parser_listtagged.add_argument('tag')
    parser_listtagged.add_argument('pkg')
    parser_listtagged.add_argument('--quiet', action='store_true')
    parser_listtagged.add_argument('--latest', action='store_true')

    parser_waitrepo = subparsers.add_parser('wait-repo')
    parser_waitrepo.add_argument('repo')
    parser_waitrepo.add_argument('--build')
    parser_waitrepo.add_argument('--target', action='store_true')

    parser_watchtask = subparsers.add_parser('watch-task')
    parser_watchtask.add_argument('taskid')

    parser_taskinfo = subparsers.add_parser('taskinfo')
    parser_taskinfo.add_argument('taskid')

    parser_downloadtask = subparsers.add_parser('download-task')
    parser_downloadtask.add_argument('taskid')
    parser_downloadtask.add_argument('--arch', action='append')

    parser_downloadlogs = subparsers.add_parser('download-logs')
    parser_downloadlogs.add_argument('taskid')
    parser_downloadlogs.add_argument('-r', action='store_true')

    parser_latest_build = subparsers.add_parser('latest-build')
    parser_latest_build.add_argument('tag')
    parser_latest_build.add_argument('pkg')
    parser_latest_build.add_argument('--quiet', action='store_true')

    parser_build = subparsers.add_parser('build')
    parser_build.add_argument('tag')
    parser_build.add_argument('pkg')
    parser_build.add_argument('--scratch', action='store_true')

    parser_tag_build = subparsers.add_parser('tag-build')
    parser_tag_build.add_argument('tag')
    parser_tag_build.add_argument('pkg')

    parser_buildinfo = subparsers.add_parser('buildinfo')
    parser_buildinfo.add_argument('pkg')

    parser_taskinfo.add_argument('-v', action='store_const', dest='output', const=_FAKE_TASKINFO)
    args = parser.parse_args()

    if 'output' in args and args.output:
        print(args.output)

    if args.subcommand in ['build', 'tag-build']:
        print('Created task: 1234')

    if 'package-with-existing-build' in sys.argv and 'latest-build' in sys.argv:
        print('package-with-existing-build-1.0-1.el7')

    if 'package-with-existing-build-1.0-1.el7' in sys.argv and 'buildinfo' in sys.argv:
        print('BUILD: package-with-existing-build-1.0-1.el7\nState: COMPLETE')

    if args.subcommand == 'latest-build' and args.pkg == 'package-with-two-targets-1.0-1.el8':
        if args.tag != 'obalclient-nightly-el8':
            print(args.pkg)

    if args.subcommand == 'buildinfo' and args.pkg == 'package-with-two-targets-1.0-1.el8':
        if 'koji build obaltest-nightly-el8 /tmp/SRPMs/package-with-two-targets-1.0-1.src.rpm' in mockbin_log_contents:
            print('BUILD: {}\nState: COMPLETE'.format(args.pkg))

elif prog in ['copr-cli']:
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand')

    parser_build = subparsers.add_parser('get-package')
    parser_build.add_argument('project')
    parser_build.add_argument('--name')
    parser_build.add_argument('--with-all-builds', action='store_true')

    parser_build = subparsers.add_parser('build')
    parser_build.add_argument('project')
    parser_build.add_argument('pkg')
    parser_build.add_argument('--nowait', action='store_true')
    parser_build.add_argument('--chroot')

    parser_build = subparsers.add_parser('list')
    parser_build.add_argument('project')

    parser_build = subparsers.add_parser('fork')
    parser_build.add_argument('src')
    parser_build.add_argument('dest')

    parser_build = subparsers.add_parser('create')
    parser_build.add_argument('project')
    parser_build.add_argument('--description')
    parser_build.add_argument('--chroot')
    parser_build.add_argument('--appstream')
    parser_build.add_argument('--delete-after-days')
    parser_build.add_argument('--unlisted-on-hp')

    parser_build = subparsers.add_parser('modify')
    parser_build.add_argument('project')
    parser_build.add_argument('--delete-after-days')

    parser_build = subparsers.add_parser('edit-chroot')
    parser_build.add_argument('project-chroot')
    parser_build.add_argument('--repos')
    parser_build.add_argument('--packages')
    parser_build.add_argument('--modules')
    parser_build.add_argument('--upload-comps')

    parser_build = subparsers.add_parser('watch-build')
    parser_build.add_argument('build')

    args = parser.parse_args()

    if args.subcommand == 'get-package':
        #json_data = json.loads('{"builds": [{"state": "succeeded", "source_package": {"version": "0.0.1"}}]}')
        json_data = {"builds": [
            {"chroots": ["rhel-7-x86_64"], "state": "succeeded", "source_package": {"version": "0.0.1"}}
        ]}
        print(json.dumps(json_data, indent=2))
    elif args.subcommand == 'build':
        print("Build was added to foreman-1234:")
        print("https://copr.fedorainfracloud.org/coprs/build/5678")
        print("Created builds: 5678")
    elif args.subcommand == 'list':
        if args.project == 'existing-fork':
            print("Name: foreman-client")
            print("  Description: foreman-client")
    else:
        print({})
