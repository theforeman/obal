#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import argparse
try:
    from pipes import quote
except ImportError:
    from shlex import quote


_FAKE_TASKINFO = """Task: 1234
Type: build
Request Parameters:
  Source: hello-2.10-1.el7.src.rpm
  Build Target: obaltest-nightly-rhel7
Owner: nobody
State: closed
Created: Tue Nov 13 08:50:17 2018
Started: Tue Nov 13 08:50:26 2018
Finished: Tue Nov 13 08:51:20 2018
Host: buildhost
Build: hello-2.10-1.el7 (12345)"""


prog = os.path.basename(sys.argv[0])
sys.argv[0] = prog

mockbin_log = os.environ.get('MOCKBIN_LOG', None)

if mockbin_log:
    with open(mockbin_log, 'a') as logfile:
        logline = ' '.join([quote(entry) for entry in sys.argv])
        logfile.write("%s\n" % (logline))

if prog == 'tito':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    parser_release = subparsers.add_parser('release')
    parser_release.add_argument('dest')
    parser_release.add_argument('--scratch', action='store_true')
    parser_release.add_argument('--test', action='store_true')
    parser_release.add_argument('-y', action='store_const', dest='output', const='Created task: 1234')
    parser_release.add_argument('--arg')
    parser_build = subparsers.add_parser('build')
    parser_build.add_argument('--srpm', action='store_const', dest='output', const='Wrote: hello.src.rpm')
    parser_build.add_argument('--scl', action='store')
    parser_build.add_argument('--offline', action='store_true')
    args = parser.parse_args()
    if 'output' in args and args.output:
        print(args.output)
elif prog in ['koji', 'brew']:
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    parser_listtagged = subparsers.add_parser('list-tagged')
    parser_listtagged.add_argument('tag')
    parser_listtagged.add_argument('pkg')
    parser_listtagged.add_argument('--quiet', action='store_true')
    parser_listtagged.add_argument('--latest', action='store_true')
    parser_waitrepo = subparsers.add_parser('wait-repo')
    parser_waitrepo.add_argument('repo')
    parser_waitrepo.add_argument('--build')
    parser_waitrepo.add_argument('--target', action='store_true')
    parser_watchtask = subparsers.add_parser('watch-task')
    parser_watchtask.add_argument('taskid')
    parser_taskinfo = subparsers.add_parser('taskinfo')
    parser_taskinfo.add_argument('taskid')
    parser_downloadtask = subparsers.add_parser('download-task')
    parser_downloadtask.add_argument('taskid')
    parser_downloadlogs = subparsers.add_parser('download-logs')
    parser_downloadlogs.add_argument('taskid')
    parser_downloadlogs.add_argument('-r', action='store_true')
    parser_taskinfo.add_argument('-v', action='store_const', dest='output', const=_FAKE_TASKINFO)
    args = parser.parse_args()
    if 'output' in args and args.output:
        print(args.output)
